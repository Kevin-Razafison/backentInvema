// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  name      String
  email     String  @unique
  password  String  
  role      Role    @default(EMPLOYE)
  requests  Request[]
  createdAt DateTime  @default(now())
  tokenUsed Boolean   @default(false)
}

enum Role {
  ADMIN
  EMPLOYE
}

model Category {
  id        Int     @id @default(autoincrement())
  name      String
  parentID  Int?
  parent    Category? @relation("Subcategories", fields: [parentID], references: [id])
  children  Category[]@relation("Subcategories")
  products  Product[]
}

model Product {
  id              Int     @id @default(autoincrement())
  name            String
  description     String?
  sku             String  @unique
  quantity        Int
  alertLevel      Int
  price           Float
  location        String?
  imageUrl        String?
  categoryId      Int
  category        Category  @relation(fields: [categoryId], references: [id])
  supplierId      Int?
  supplier        Supplier? @relation(fields: [supplierId], references: [id])
  requests        Request[]
  orderItems      OrderItem[]
}

model Supplier {
  id            Int      @id  @default(autoincrement())
  name          String
  phone         String?
  email         String?
  address       String?
  products      Product[]
  orders        Order[]
  imageUrl      String
  category      String
}

model Order {
  id          Int           @id @default(autoincrement())
  status      OrderStatus   @default(PENDING)
  createdAt   DateTime      @default(now())
  expectedDate DateTime?
  supplierId  Int
  supplier    Supplier      @relation(fields: [supplierId], references: [id])
  items       OrderItem[]
}

model OrderItem {
  id              Int   @id @default(autoincrement())
  productId      Int
  quantity        Int
  orderId         Int
  product         Product @relation(fields: [productId], references: [id])
  order           Order   @relation(fields: [orderId],  references: [id])
}

enum  OrderStatus {
  PENDING
  SENT
  RECEIVED
  PARTIAL
}

model Request {
  id          Int       @id @default(autoincrement())
  quantity    Int
  reason      String?
  status      RequestStatus   @default(PENDING)
  productId  Int
  userId      Int
  product     Product @relation(fields: [productId], references:[id])
  user        User    @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
}

enum RequestStatus{
  PENDING
  APPROVED
  REJECTER
  PREPARED
  PICKEDUP
}